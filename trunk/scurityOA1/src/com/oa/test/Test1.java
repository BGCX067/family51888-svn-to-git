package com.oa.test;

public class Test1 {
	
	public static void main(String[] args) {
		int temp=1;
		int perm=4;
		int result=temp<<2;//移位 
		int resultw=temp & perm; //与运算
		int h=temp | perm;//或运算
		int f=~temp; //取反 ~
		System.out.println(result+" "+resultw);
		System.out.println("|"+h);
		System.out.println("~"+f);
	}

}



/*位运算
与 &          或 ｜       非 ~            异或 ^
00000011     00000011                       00000011 
& 00000101   | 00000101      ~ 00000101     ^ 00000101 
-----------   -----------     -----------    -----------
00000001     00000111        11111010       00000110
1、采用二进制实现
C    R     U     D
1    2     4     8
2^0  2^1   2^2   2^3

2、给用户授权
如果有给一个已经拥有了U权限的用户(0100) 增加一个R 的权限
0001 << 2 --> 0010

与当前所拥有的权限进行与运算

	0010
| 0100
---------
0110

    如果有给一个已经拥有了U和R权限的用户(0110) 去掉一个R 的权限
0001 << 2 --> 0010
     先取反   
~0010  --> 1101

      再和  当前所拥有的权限进行与运算
   0110
 & 1101
---------
   0100

3、判断是否拥有某权限
判断用户是否拥有R 的权限
0001 << 2 --> 0010
    如果有已经拥有了U和R权限的用户(0110)

  0010
& 0110
---------
  0010

    不为零表示拥有该权限
    
     如果有已经拥有了U权限的用户(0100)

  0010
& 0100
---------
  0000
  
      为零表示没有该权限
      
    */

/*与:相同为1 不同为0 
或:只要有1的则为1 
非: 反
异或:相同的为0  不同为1
c r u d
增 删 改 查
万能的权限码全部都是 1
2^1 2^2 2^4 2^8
0001 0010 0100 1000
判断的用记是否有权限
15=1111 二进制

与一下 是否有这个权限 
或一下 增加一个权限
先取反 再与    删除一全权限

转换二进制
移位 <<    0010=1<<0001
*/